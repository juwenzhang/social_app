// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// define test tables
model Test {
  id           Int          @id               @default(autoincrement())
  name         String       @db.VarChar(255)
  desc         String?
  number       Int
  isPublished  Boolean
}

// define user table
model User {
  id            String      @id               @unique
  username      String      @db.VarChar(32)   @unique
  avatar        String?
  cover         String?
  name          String?
  description   String?
  enterprise    String?
  city          String?
  school        String?
  github_name   String?
  github_link   String?
  juejin_name   String?
  juejin_link   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  followers     Follower[]  @relation("UserFollowers")
  following     Follower[]  @relation("UserFollowings")
  sentRequests  FollowRequest[]  @relation("FollowRequestSend")
  receivedRequests  FollowRequest[]  @relation("FollowRequestReceived")
  blocks        Block[]     @relation("BlockSend")
  blocked       Block[]     @relation("BlockReceived")
  stories       Story[]
}

// define post table
model Post {
  id            Int         @id               @default(autoincrement())
  desc          String?
  image         String?
  video         String?
  audio         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields:[userId], references:[id], onDelete:Cascade)
  userId        String
  likes         Like[]
  comments      Comment[]
}

// define comment table
model Comment {
  id            Int         @id               @default(autoincrement())
  content       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields:[userId], references:[id], onDelete:Cascade)
  userId        String
  post          Post        @relation(fields:[postId], references:[id], onDelete:Cascade)
  postId        Int
  likes         Like[]
}

// define like table
model Like {
  id            Int         @id               @default(autoincrement())
  createdAt     DateTime    @default(now())
  user          User        @relation(fields:[userId], references:[id], onDelete:Cascade)
  userId        String
  post          Post?       @relation(fields:[postId], references:[id], onDelete:Cascade)
  postId        Int?
  comment       Comment?    @relation(fields:[commentId], references:[id], onDelete:Cascade)
  commentId     Int?
}

// define Follower table
model Follower {
  id            Int         @id               @default(autoincrement())
  createdAt     DateTime    @default(now())
  follower      User        @relation("UserFollowers", fields:[followerId], references:[id], onDelete:Cascade)
  followerId    String
  following     User        @relation("UserFollowings", fields:[followingId], references:[id], onDelete:Cascade)
  followingId   String
  @@index([followerId, followingId])
}

// define FollowRequest table
model FollowRequest {
  id            Int         @id               @default(autoincrement())
  createdAt     DateTime    @default(now())
  sender        User        @relation("FollowRequestSend", fields:[senderId], references:[id], onDelete:Cascade)
  senderId      String
  receiver      User        @relation("FollowRequestReceived", fields:[receiverId], references:[id], onDelete:Cascade)
  receiverId    String

  @@unique([senderId, receiverId])
}

// defien block table
model Block {
  id            Int         @id               @default(autoincrement())
  createdAt     DateTime    @default(now())
  blocker       User        @relation("BlockSend", fields:[blockerId], references:[id], onDelete:Cascade)
  blockerId     String
  blocked       User        @relation("BlockReceived", fields:[blockedId], references:[id], onDelete:Cascade)
  blockedId     String
  @@unique([blockerId, blockedId])
}

// define stories table
model Story {
  id            Int         @id               @default(autoincrement())
  createdAt     DateTime    @default(now())
  expiresAt     DateTime
  user          User        @relation(fields:[userId], references:[id], onDelete:Cascade)
  userId        String      @unique
}